# Global tags can be specified here in key="value" format.
[global_tags]
region="${REGION}"
scaleUnit="${SCALE_UNIT}"
component="${COMPONENT}"
service="${SERVICE}"

# Configuration for telegraf agent
[agent]
## Default data collection interval for all inputs
interval = "30s"
## Rounds collection interval to 'interval'
## ie, if interval="10s" then always collect on :00, :10, :20, etc.
round_interval = true

## Telegraf will send metrics to outputs in batches of at most
## metric_batch_size metrics.
## This controls the size of writes that Telegraf sends to output plugins.
metric_batch_size = 1000

## For failed writes, telegraf will cache metric_buffer_limit metrics for each
## output, and will flush this buffer on a successful write. Oldest metrics
## are dropped first when this buffer fills.
## This buffer only fills when writes fail to output plugin(s).
metric_buffer_limit = 10000

## Collection jitter is used to jitter the collection by a random amount.
## Each plugin will sleep for a random time within jitter before collecting.
## This can be used to avoid many plugins querying things like sysfs at the
## same time, which can have a measurable effect on the system.
collection_jitter = "0s"

## Default flushing interval for all outputs. Maximum flush_interval will be
## flush_interval + flush_jitter
flush_interval = "10s"
## Jitter the flush interval by a random amount. This is primarily to avoid
## large write spikes for users running a large number of telegraf instances.
## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
flush_jitter = "0s"

## By default or when set to "0s", precision will be set to the same
## timestamp order as the collection interval, with the maximum being 1s.
##   ie, when interval = "10s", precision will be "1s"
##       when interval = "250ms", precision will be "1ms"
## Precision will NOT be used for service inputs. It is up to each individual
## service input to set the timestamp at the appropriate precision.
## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
precision = ""

## Logging configuration:
## Run telegraf with debug log messages.
debug = true
## Run telegraf in quiet mode (error log messages only).
quiet = false
## Specify the log file name. The empty string means to log to stderr.
logfile = ""

## Override default hostname, if empty use os.Hostname()
hostname = ""
## If set to true, do no set the "host" tag in the telegraf agent.
omit_hostname = true


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for sending metrics to InfluxDB
[[outputs.influxdb]]
## The full HTTP or UDP URL for your InfluxDB instance.
##
## Multiple URLs can be specified for a single cluster, only ONE of the
## urls will be written to each interval.
urls = ["udp://geneva-services.monitor-namespace:8089"]

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################
[[inputs.kubernetes]]
name_override = "PlatformMetrics"
namepass = ["kubernetes_pod_container","kubernetes_node","kubernetes_pod_network"]
# Unused metrics of kubernetes_pod_container - "cpu_usage_core_nanoseconds","memory_rss_bytes","resource_limits_memory_bytes","resource_limits_millicpu_bytes","resource_requests_memory_bytes","resource_requests_millicpu_bytes","restarts_total","state_code"
# Unused metrics of kubernetes_node - "allocatable_cpu_cores","allocatbale_memory_bytes","allocatable_pods","capacity_cpu_cores","capacity_memory_cores","capacity_pods"
fieldpass = [
    "cpu_usage_nanocores",
    "memory_usage_bytes",
    "memory_working_set_bytes",
    "memory_rss_bytes",
    "fs_available_bytes",
    "fs_capacity_bytes",
    "fs_used_bytes"
]

## URL for the kubelet
url = "https://${HOST_IP}:10250"

insecure_skip_verify = true